jobs:
  - job: Backend
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.1.402'
    - script: dotnet restore
      workingDirectory: backend/mobilityAI
      displayName: 'Install Dependencies'
    - script: dotnet build
      workingDirectory: backend/mobilityAI
      displayName: 'Build'
    - script: dotnet restore
      workingDirectory: backend/mobilityAI.Tests
      displayName: 'Restore test dependencies'
    - script: dotnet test mobilityAI.Tests.csproj  --logger:"nunit;LogFilePath=xunit_results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[xunit*]*"
      workingDirectory: backend
      displayName: 'Tests'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: xUnit
        testResultsFiles: 'backend/mobilityAI.Tests/xunit_results.xml'
    - task: PublishCodeCoverageResults@1
      inputs: 
        codeCoverageTool: Cobertura
        summaryFileLocation: 'backend/mobilityAI.Tests/cobertura-coverage.xml'
  - job: Frontend
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '9.7.1'
      displayName: 'Install Node'
    - script: npm install
      workingDirectory: frontend/mobilityai_react
      displayName: 'Install dependencies'
    - script: npm run test-ci
      workingDirectory: frontend/mobilityai_react
      displayName: 'Run tests'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: 'frontend/mobilityai_react/junit.xml'
    - task: PublishCodeCoverageResults@1
      inputs: 
        codeCoverageTool: Cobertura
        summaryFileLocation: 'frontend/mobilityai_react/coverage/cobertura-coverage.xml'
  - job: Machine_Learning
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'
    - script: pip install pipenv
      workingDirectory: machine_learning
      displayName: 'Install pipenv'
    - script: pipenv shell
      workingDirectory: machine_learning
      displayName: 'Enter pipenv shell'
    - script: pipenv install
      workingDirectory: machine_learning
      displayName: 'Install dependencies'
    - script: pipenv run coverage run -m pytest --junitxml=junit.xml
      workingDirectory: machine_learning
      displayName: 'Run tests'
    - script: pipenv run coverage xml
      workingDirectory: machine_learning
      displayName: 'Generate coverage report'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: 'machine_learning/junit.xml'
    - task: PublishCodeCoverageResults@1
      inputs: 
        codeCoverageTool: Cobertura
        summaryFileLocation: 'machine_learning/coverage.xml'
